import { getRecordById, updateRecord } from '@/lib/airtable';
import { normalizeData } from '@/lib/utils';
import { generatePDF } from '@/lib/pdf';
import { uploadToDrive } from '@/lib/drive';
import { basicAuth } from '@/lib/auth';

export async function POST(request) {
    console.log('--- D√©but de la requ√™te POST ---');

    // V√©rification de l'authentification basique
    const authResponse = basicAuth(request);
    if (authResponse) {
        console.log('‚ö†Ô∏è Authentification √©chou√©e');
        return authResponse;
    }
    console.log('‚úÖ Authentification r√©ussie');

    const body = await request.json();
    const recordId = body.recordId;
    console.log('recordId re√ßu :', recordId);

    if (!recordId) {
        console.log('‚ùå recordId manquant dans la requ√™te');
        return new Response('Missing recordId', { status: 400 });
    }

    try {
        console.log('‚è≥ R√©cup√©ration des donn√©es Airtable...');
        const rawData = await getRecordById(recordId);
        console.log('‚úÖ Donn√©es brutes r√©cup√©r√©es:', rawData);

        const data = normalizeData(rawData);
        console.log('‚úÖ Donn√©es normalis√©es:', data);

        console.log('‚è≥ G√©n√©ration du PDF...');
        const pdfBuffer = await generatePDF(data);
        console.log('üìÑ Type de pdfBuffer :', typeof pdfBuffer);

        const folderId = process.env.DRIVE_FOLDER_ID;
        const titre = data.bilanVO || recordId;
        const safeTitle = titre.replace(/[\\/:*?"<>|]/g, '');
        const fileName = `${safeTitle}.pdf`;
        console.log(`Nom de fichier pour upload : ${fileName}`);

        console.log('‚è≥ Upload vers Google Drive...');
        const publicUrl = await uploadToDrive(pdfBuffer, fileName, folderId);
        console.log('‚úÖ Fichier upload√© avec succ√®s. URL publique :', publicUrl);

        console.log('‚è≥ Mise √† jour du champ PDF dans Airtable...');
        await updateRecord(recordId, {
            PDF: publicUrl
        });
        console.log('‚úÖ Airtable mis √† jour');

        // Retourner un JSON avec l'URL
        return new Response(JSON.stringify({ url: publicUrl }), {
            headers: {
                'Content-Type': 'application/json'
            }
        });

    } catch (error) {
        console.error('‚ùå Error generating/uploading PDF:', error.message, error.stack);
        return new Response('Error generating/uploading PDF', { status: 500 });
    }
}
